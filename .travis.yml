language: rust
notifications:
  email:
    on_success: never
addons:
  apt:
    packages:
      - pkg-config
os: linux

jobs:
  include:
    - name: xenial-stable-conda-1.10.4
      dist: xenial
      rust: 1.40.0
      env:
        - H5_CONDA=1.10.4
    - name: xenial-beta-apt-1.8.13
      dist: xenial
      rust: beta
      addons:
        apt:
          packages:
            - libhdf5-dev
      env:
        - HDF5_VERSION=1.8.16
    - name: trusty-nightly-apt-1.8.11
      dist: trusty
      rust: nightly
      addons:
        apt:
          packages:
            - libhdf5-serial-dev
    - name: macos-stable-brew-1.8.*
      os: osx
      rust: stable
      env:
        - H5_BREW=1.8
    - name: macos-beta-brew-1.10.*
      os: osx
      rust: beta
      env:
        - H5_BREW=1.10
    - name: macos-nightly-conda-1.8.9
      os: osx
      rust: nightly
      env:
        - H5_CONDA=1.8.9
        - HDF5_VERSION=1.8.9

before_script:
- |
  if [ $TRAVIS_RUST_VERSION = "nightly" ]; then
    rustup component add clippy --toolchain=nightly || true;
  fi
- cd $TRAVIS_BUILD_DIR
script:
- |
  if { [ $TRAVIS_RUST_VERSION = "nightly" ] && which cargo-clippy >/dev/null; }; then
    if rustup component list | grep -E "clippy.+installed"; then
      cargo clippy -v;
    fi
  fi
- cargo clean
- cargo build -vv
- cargo test -v --all
before_install:
- |
  if [ `uname` = "Darwin" ] && [ ! -z "$H5_BREW" ]; then
    brew update >/dev/null || true;
    brew remove --ignore-dependencies hdf5 || true;
    brew install hdf5@${H5_BREW} || true;
    true
  fi
- |
  if [ ! -z "$H5_CONDA" ]; then
    if [ `uname` = "Darwin" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      # note: this is only required for older HDF5 installations on OS X
      export DYLD_FALLBACK_LIBRARY_PATH="$HOME/miniconda/envs/testenv/lib";
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
    bash miniconda.sh -b -p $HOME/miniconda;
    export PATH="$HOME/miniconda/bin:$PATH";
    hash -r;
    conda config --set always_yes yes --set changeps1 no;
    conda info -a;
    conda create -q -n testenv -c anaconda hdf5=${H5_CONDA};
    export HDF5_DIR="$HOME/miniconda/envs/testenv";
    export RUSTFLAGS="-C link-args=-Wl,-rpath,$HOME/miniconda/envs/testenv/lib";
  fi
- |
  if [ $TRAVIS_OS_NAME = "linux" ]; then
    pkg-config hdf5 --modversion || true;
  fi
- find /usr -name '*hdf5*' || true
- find /usr -name 'H5*.h' || true

cache:
  directories:
    - /home/travis/.cargo
before_cache:
  - rm -rf /home/travis/.cargo/registry

before_deploy:
  - cargo doc --no-deps
  - echo '<meta http-equiv=refresh content=0;url=hdf5/index.html>' > target/doc/index.html
deploy:
  provider: pages
  cleanup: true
  token: $GITHUB_TOKEN
  local_dir: target/doc
  on:
    branch: master
    condition: "$TRAVIS_RUST_VERSION = stable && $TRAVIS_OS_NAME = linux"
